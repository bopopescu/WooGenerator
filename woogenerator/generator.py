"""
Generator extracts data from a master and slave database of product information,
then synchronizes that information on several layers.
In a typical configuration, the master is a spreadsheet of product information
in the generator format, which is a custom heirarchical representation of product
and category data designed for minimal redundancy.
The generator format is a hybrid of a tree structure with a flat-file table.
Product titles and SKUs are generated by concatenating the name and code
fragments of a product's ancestors in a tree.

These are the steps that generator uses to synchronize products:
 - The master information is optionally downloaded from Google Drive if the
 `--download-master` flag is set, or it is read from local csv files.
 - Master information is parsed into a master `CSVParse` object which contains
 several `Import` objects which correspond to products, variations, images,
 categories and other objects within the database.
 - The master information is exported as a set of CSV file which is compatible with the
 WooCommerce Product CSV Import Suite plugin. At this point the program can be
 terminated if the `--master-and-quit` command line flag is set.
 - Slave product information is optionally downloaded from the the selected API
 and parsed in a similar way to master if the `--download-slave` flag is set,
 otherwise it is parsed from local json files
 - The objectes from these parser objects are matched with each other into a
 collection of `match` objects which need special attention when the `matcher`
 objects encounter duplicates. Matching has to be done separately for images,
 categories, products and product variations in this order since each of these
 layers are inter-dependent.
 - The `match` objects are analysed and a collection of `sync_update` objects
 are generated which describe how to update the databases so that they match.
 This process is referred to as merging.
 - Before any updates are done, some HTML reports are generated and the user
 is asked for confirmation before continuing.
 - The updates are then carried out on the slave database using a `sync_client`
 for each layer.

"""

from __future__ import absolute_import


# to run full sync test on TT
"""
python -m woogenerator.generator \
    --testmode --schema "TT" \
    --local-work-dir '/Users/derwent/Documents/woogenerator/' \
    --download-master --download-slave \
    --do-categories --do-images --do-specials \
    --do-sync --update-slave --do-problematic --auto-create-new --ask-before-update \
    -vvv --debug-trace
"""

# To run full sync test on VT
"""
python -m woogenerator.generator \
    --testmode --schema "VT" \
    --local-work-dir '/Users/derwent/Documents/woogenerator/' \
    --local-test-config 'generator_config_test_vt.yaml' \
    --download-master --download-slave \
    --do-categories --do-specials \
    --do-images --do-resize-images \
    --do-sync --update-slave --do-problematic --auto-create-new --ask-before-update \
    -vvv --debug-trace
"""

# TT just master and quit
"""
python -m woogenerator.generator \
    --testmode --schema "TT" \
    --local-work-dir '/Users/derwent/Documents/woogenerator/' \
    --download-master --download-slave \
    --do-categories --do-images --do-variations --master-and-quit \
    --do-specials --specials-mode 'auto_next' \
    -vvv --debug-trace
"""

## VT just master and quit
"""
python -m woogenerator.generator \
    --testmode --schema "VT" \
    --local-work-dir '/Users/derwent/Documents/woogenerator/' \
    --local-test-config 'generator_config_test_vt.yaml' \
    --download-master --download-slave \
    --do-categories --do-images --do-variations --master-and-quit \
    --do-specials --specials-mode 'all_future' \
    -vvv --debug-trace
"""

import io
import os
import shutil
import sys
import time
import traceback
import webbrowser
import zipfile
from bisect import insort
from collections import OrderedDict
from pprint import pformat, pprint

from exitstatus import ExitStatus
from requests.exceptions import ConnectionError, ConnectTimeout, ReadTimeout

from .images import process_images
from .matching import (AttacheeSkuMatcher, AttachmentIDMatcher,
                       CategoryMatcher, ImageMatcher, ProductMatcher,
                       VariationMatcher, AttacheeTitleMatcher)
from .namespace.core import (MatchNamespace, ParserNamespace, ResultsNamespace,
                             UpdateNamespace)
from .namespace.prod import SettingsNamespaceProd
from .parsing.api import ApiParseWoo
from .parsing.dyn import CsvParseDyn
from .parsing.special import CsvParseSpecial
from .parsing.woo import WooCatList
from .utils import (ProgressCounter, Registrar, SanitationUtils, SeqUtils,
                    TimeUtils)
from .utils.reporter import (ReporterNamespace, do_cat_sync_gruop,
                             do_category_matches_group, do_delta_group,
                             do_duplicates_group, do_duplicates_summary_group,
                             do_failures_group, do_img_sync_group,
                             do_main_summary_group, do_matches_group,
                             do_matches_summary_group, do_post_summary_group,
                             do_successes_group, do_sync_group,
                             do_variation_matches_group,
                             do_var_sync_group)


def timediff(settings):
    """Return time elapsed since start."""
    return time.time() - settings.start_time


def check_warnings(settings):
    """
    Check if there have been any errors or warnings registered in Registrar.

    Raise approprriate exceptions if needed
    """
    if Registrar.errors:
        print("there were some urgent errors "
              "that need to be reviewed before continuing")
        Registrar.print_message_dict(0)
        usr_prompt_continue(settings)
        if Registrar.DEBUG_TRACE:
            import pudb; pudb.set_trace()

    elif Registrar.warnings:
        print "there were some warnings that should be reviewed"
        Registrar.print_message_dict(1)


def populate_master_parsers(parsers, settings):
    """Create and populates the various parsers."""
    Registrar.register_message('schema: %s, woo_schemas: %s' % (
        settings.schema, settings.woo_schemas
    ))

    parsers.dyn = CsvParseDyn()
    parsers.special = CsvParseSpecial()

    if Registrar.DEBUG_GEN:
        Registrar.register_message(
            "master_download_client_args: %s" %
            settings.master_download_client_args)

    with settings.master_download_client_class(**settings.master_download_client_args) as client:

        if settings.schema_is_woo:
            if settings.do_dyns:
                Registrar.register_message("analysing dprc rules")
                client.analyse_remote(
                    parsers.dyn,
                    data_path=settings.dprc_path,
                    gid=settings.dprc_gid
                )
                settings.dprc_rules = parsers.dyn.taxos

                Registrar.register_message("analysing dprp rules")
                parsers.dyn.clear_transients()
                client.analyse_remote(
                    parsers.dyn,
                    data_path=settings.dprp_path,
                    gid=settings.dprp_gid
                )
                settings.dprp_rules = parsers.dyn.taxos

            if settings.do_specials:
                Registrar.register_message("analysing specials")
                client.analyse_remote(
                    parsers.special,
                    data_path=settings.specials_path,
                    gid=settings.spec_gid
                )
                if Registrar.DEBUG_SPECIAL:
                    Registrar.register_message(
                        "all specials: %s" % parsers.special.tabulate()
                    )

                settings.special_rules = parsers.special.rules

                settings.current_special_groups = parsers.special.determine_current_spec_grps(
                    specials_mode=settings.specials_mode,
                    current_special=settings.current_special
                )

                if settings.current_special_groups:
                    Registrar.register_message(
                        "current_special_groups: \n%s" % (
                            parsers.special.taxo_container.container(
                                settings.current_special_groups
                            ).tabulate()
                        )
                    )
                else:
                    Registrar.register_warning(
                        "No special groups were found, here are the latest specials: \n%s" % (
                            parsers.special.taxo_container.container(
                                parsers.special.last_5()
                            ).tabulate()
                        )
                    )

        master_parser_args = settings.master_parser_args

        if os.path.exists(settings.master_path):
            master_mod_ts = max(
                os.path.getmtime(settings.master_path), os.path.getctime(settings.master_path)
            )
            master_mod_dt = TimeUtils.timestamp2datetime(master_mod_ts)
            master_parser_args['defaults'].update({
                'modified_local': master_mod_dt,
                'modified_gmt': TimeUtils.datetime_local2gmt(master_mod_dt)
            })


        parsers.master = settings.master_parser_class(
            **master_parser_args
        )

        Registrar.register_progress("analysing master product data")

        analysis_kwargs = {
            'data_path': settings.master_path,
            'gid': settings.gen_gid,
            'limit': settings['master_parse_limit']
        }
        if Registrar.DEBUG_PARSER:
            Registrar.register_message("analysis_kwargs: %s" % analysis_kwargs)

        client.analyse_remote(parsers.master, **analysis_kwargs)

        if Registrar.DEBUG_PARSER and hasattr(
                parsers.master, 'categories_name'):
            for category_name, category_list in getattr(
                    parsers.master, 'categories_name').items():
                if len(category_list) < 2:
                    continue
                if SeqUtils.check_equal(
                        [category.namesum for category in category_list]):
                    continue
                Registrar.register_warning("bad category: %50s | %d | %s" % (
                    category_name[:50], len(category_list), str(category_list)
                ))

        return parsers


def populate_slave_parsers(parsers, settings):
    """Populate the parsers for data from the slave database."""

    parsers.slave = settings.slave_parser_class(**settings.slave_parser_args)

    slave_client_class = settings.slave_download_client_class
    slave_client_args = settings.slave_download_client_args

    # with ProdSyncClientWC(settings['slave_wp_api_params']) as client:

    if settings.schema_is_woo and settings.do_categories:
        Registrar.register_progress("analysing API category data")

        cat_sync_client_class = settings.slave_cat_sync_client_class
        cat_sync_client_args = settings.slave_cat_sync_client_args

        with cat_sync_client_class(**cat_sync_client_args) as client:
            client.analyse_remote_categories(
                parsers.slave,
                data_path=settings.slave_cat_path
            )

    # TODO: ignore products which are post_status = trash

    with slave_client_class(**slave_client_args) as client:

        Registrar.register_progress("analysing API product data")

        client.analyse_remote(
            parsers.slave,
            data_path=settings.slave_path
        )

    if settings.schema_is_woo and settings.do_images:
        Registrar.register_progress("analysing API image data")
        img_client_class = settings.slave_img_sync_client_class
        img_client_args = settings.slave_img_sync_client_args

        with img_client_class(**img_client_args) as client:
            client.analyse_remote_imgs(
                parsers.slave,
                data_path=settings.slave_img_path,
                skip_unattached_images=settings.skip_unattached_images
            )

    if Registrar.DEBUG_CLIENT:
        container = settings.slave_parser_class.product_container.container
        prod_list = container(parsers.slave.products.values())
        Registrar.register_message("Products: \n%s" % prod_list.tabulate())

    return parsers

def export_categories(settings, parser, csv_file, export_target):
    # category_cols = settings.coldata_class_cat.get_col_data_native('write', target=export_target)
    category_col_names = settings.coldata_class_cat.get_col_values_native('path', target=export_target)
    for col in settings.exclude_cols_cat:
        if col in category_col_names:
            del category_col_names[col]
    category_container = settings.master_parser_class.category_container.container
    category_list = category_container([
        category for category in parser.categories.values()
        if category.members
    ])
    category_list.export_items(
        csv_file, category_col_names,
        coldata_target=export_target
    )

def export_master_parser(settings, parsers):
    """Export key information from master parser to csv."""
    Registrar.register_progress("Exporting Master info to disk")

    export_target = 'wc-csv'

    product_colnames = settings.coldata_class.get_col_values_native('path', target=export_target)

    for col in settings.exclude_cols:
        if col in product_colnames:
            del product_colnames[col]

    extra_colnames = OrderedDict([
        ('title_1', 'meta:title_1'),
        ('title_2', 'meta:title_2')
    ])
    if settings.schema_is_woo and settings.do_attributes:
        extra_colnames = SeqUtils.combine_ordered_dicts(
            extra_colnames,
            settings.coldata_class.get_attribute_colnames_native(
                parsers.master.attributes, parsers.master.vattributes
            )
        )
    product_colnames = SeqUtils.combine_ordered_dicts(
        product_colnames, extra_colnames
    )

    container = parsers.master.product_container.container

    product_list = container(parsers.master.products.values())

    product_list.export_items(
        settings.fla_path, product_colnames,
        coldata_target=export_target,
        extra_colnames=extra_colnames
    )

    # TODO: stop exporting modified_gmt to spreadsheet

    if settings.schema_is_woo:
        # variations
        variation_container = settings.master_parser_class.variation_container.container
        # variation_cols = settings.coldata_class_var.get_col_data_native('write', target='wc-csv')
        variation_col_names = settings.coldata_class_var.get_col_values_native('path', target=export_target)
        extra_variation_col_names = settings.coldata_class_var.get_attribute_meta_colnames_native(
            parsers.master.vattributes
        )
        variation_col_names = SeqUtils.combine_ordered_dicts(
            variation_col_names, extra_variation_col_names
        )
        if settings.do_variations and parsers.master.variations:

            variation_list = variation_container(parsers.master.variations.values())
            variation_list.export_items(
                settings.flv_path, variation_col_names,
                coldata_target=export_target,
                extra_colnames=extra_variation_col_names
            )

            updated_variations = parsers.master.updated_variations.values()

            if updated_variations:
                updated_variations_list = variation_container(updated_variations)
                updated_variations_list.export_items(
                    settings.flvu_path, variation_col_names,
                    coldata_target=export_target,
                    extra_colnames=extra_variation_col_names
                )

        # categories
        if settings.do_categories and parsers.master.categories:
            export_categories(settings, parsers.master, settings.cat_path, export_target)

        # specials
        if settings.do_specials and settings.current_special_id:
            special_products = parsers.master.onspecial_products.values()
            if special_products:
                special_product_list = container(special_products)
                special_product_list.export_items(
                    settings.fls_path, product_colnames,
                    coldata_target=export_target,
                    extra_colnames=extra_colnames
                )
            special_variations = parsers.master.onspecial_variations.values()
            if special_variations:
                sp_variation_list = variation_container(special_variations)
                sp_variation_list.export_items(
                    settings.flvs_path, variation_col_names,
                    coldata_target=export_target,
                    extra_colnames=extra_variation_col_names
                )

        updated_products = parsers.master.updated_products.values()
        if updated_products:
            updated_product_list = container(updated_products)
            updated_product_list.export_items(
                settings.flu_path, product_colnames,
                coldata_target=export_target,
                extra_colnames=extra_colnames
            )

            # TODO; updated variations

    Registrar.register_progress("CSV Files have been created.")

def cache_api_data(settings, parsers):
    """Export key information from slave parser to csv."""
    if not settings.download_slave:
        return

    Registrar.register_progress("Exporting Slave info to disk")
    container = settings.slave_parser_class.product_container.container
    product_list = container(parsers.slave.products.values())
    product_list.export_api_data(settings.slave_path)

    if settings.do_categories and parsers.slave.categories:
        category_container = settings.slave_parser_class.category_container.container
        category_list = category_container(parsers.slave.categories.values())
        category_list.export_api_data(settings.slave_cat_path)

    if settings.do_images and parsers.slave.attachments:
        attachment_container = settings.slave_parser_class.attachment_container.container
        image_list = attachment_container(parsers.slave.attachments.values())
        image_list.export_api_data(settings.slave_img_path)

def do_match_images(parsers, matches, settings):
    if Registrar.DEBUG_IMG:
        Registrar.register_message(
            "matching %d master attachments with %d slave attachments" %
            (len(parsers.master.attachments),
             len(parsers.slave.attachments)))

    matches.image = MatchNamespace(
        index_fn=ImageMatcher.image_index_fn
    )

    # TODO: fix not syncing to VuTan
    """
source/generator.py:1696.main>source/generator.py:475.do_match_images ~ analysing duplicate match:
objects            modified_gmt               modified_local       title                                               ID      width    height  file_path
-----------------  -------------------------  -------------------  --------------------------------------------------  ----  -------  --------  --------------------------------------------------
307|CVEXG-250.png  2017-12-11 20:52:52+00:00  2017-12-12 06:32:52  Exfoliating Facial Gel - Lavender & Rosemary - 250           1181      1181  /Users/Derwent/Documents/TechnoTan/compressed/imag
source/generator.py:1696.main>source/generator.py:484.do_match_images ~ sub match CVEXG-250 is slaveless:
objects            modified_gmt               modified_local       title                                               ID      width    height  file_path
-----------------  -------------------------  -------------------  --------------------------------------------------  ----  -------  --------  --------------------------------------------------
307|CVEXG-250.png  2017-12-11 20:52:52+00:00  2017-12-12 06:32:52  Exfoliating Facial Gel - Lavender & Rosemary - 250           1181      1181  /Users/Derwent/Documents/TechnoTan/compressed/imag
source/generator.py:1696.main>source/generator.py:475.do_match_images ~ analysing duplicate match:
objects        modified_gmt               modified_local       title                                               ID      width    height  file_path
-------------  -------------------------  -------------------  --------------------------------------------------  ----  -------  --------  --------------------------------------------------
309|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Exfoliating Facial Gel - Lavender & Rosemary - 10m           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
314|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Exfoliating Body Cream - Peach & Vanilla - 10ml sa           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
320|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Tan Remover - Melon & Cucumber - 10ml sample (jar)           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
395|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Tan Saver Body Wash - Peach & Vanilla - 10ml sampl           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
400|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Tan Saver Body Wash - Coconut & Lime - 10ml sample           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
411|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Deluxe Body Butter - Tamarillo - 10ml sample (sach           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
416|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Deluxe Body Butter - Peach & Vanilla - 10ml sample           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
421|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Deluxe Body Butter - Toffee - 10ml sample (sachet)           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
426|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Body Butter with Shimmer - Peach & Vanilla - 10ml            1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
487|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Tan Extender - Coconut Cream - 10ml sample (sachet           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
492|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Bronzing Cream - Tamarillo & Papaya - 10ml sample            1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
497|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Shimmering Bronzer - Tamarillo & Papaya - 10ml sam           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
545|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Coconut & Lime Shampoo - 10ml Sample Sachet                  1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
550|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Coconut & Lime Conditioner - 10ml Sample Sachet              1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
source/generator.py:1696.main>source/generator.py:484.do_match_images ~ sub match CVBBS-S is slaveless:
objects        modified_gmt               modified_local       title                                              ID      width    height  file_path
-------------  -------------------------  -------------------  -------------------------------------------------  ----  -------  --------  --------------------------------------------------
426|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Body Butter with Shimmer - Peach & Vanilla - 10ml           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
source/generator.py:1696.main>source/generator.py:484.do_match_images ~ sub match CVCO-S is slaveless:
objects        modified_gmt               modified_local       title                                            ID      width    height  file_path
-------------  -------------------------  -------------------  -----------------------------------------------  ----  -------  --------  --------------------------------------------------
550|VTS-S.png  2017-12-11 20:52:55+00:00  2017-12-12 06:32:55  Coconut & Lime Conditioner - 10ml Sample Sachet           1920      1920  /Users/Derwent/Documents/TechnoTan/compressed/imag
source/generator.py:1882.<module>>source/generator.py:1842.catch_main ! Traceback (most recent call last):
  File "/Users/derwent/Documents/GitHub/WooGenerator/woogenerator/generator.py", line 1826, in catch_main
    main(settings=settings, override_args=override_args)
  File "/Users/derwent/Documents/GitHub/WooGenerator/woogenerator/generator.py", line 1696, in main
    do_match_images(parsers, matches, settings)
  File "/Users/derwent/Documents/GitHub/WooGenerator/woogenerator/generator.py", line 500, in do_match_images
    matches.image.slaveless.add_matches([match])
  File "woogenerator/matching.py", line 364, in add_matches
    self.add_match(match)
  File "woogenerator/matching.py", line 348, in add_match
    match), str('\n'.join(map(str, self)))
AssertionError: can't add match m_object 550|VTS-S.png <ImportWooImg> : m_index VTS-S.png already in m_indices: [u'SVV2.png', u'SVV2-CAL.png', u'SVV2-CAH.png', u'SVV2-CAS.png', u'SVV2-CCL.png', u'SVV2-CCH.png', u'SVV2-CCS.png', u'SVV2-CFL.png', u'SVV2-CFH.png', u'SVV2-CFS.png', u'SVV2-CML.png', u'SVV2-CMH.png', u'SVV2-CMS.png', u'SVV2-EBL.png', u'SVV2-EBH.png', u'SVV2-EBS.png', u'SVFTB.png', u'SVFTB-ML.png', u'SVFTB-MH.png', u'SVFTB-MS.png', u'SVFTB-DL.png', u'SVFTB-DH.png', u'SVFTB-DS.png', u'SVFTB-XDL.png', u'SVFTB-XDH.png', u'SVFTB-XDS.png', u'SVBTP.png', u'SVBTP-LL.png', u'SVBTP-LH.png', u'SVBTP-LS.png', u'SVBTP-CL.png', u'SVBTP-CH.png', u'SVBTP-CS.png', u'SVBTP-ML.png', u'SVBTP-MH.png', u'SVBTP-MS.png', u'SVBTP-EL.png', u'SVBTP-EH.png', u'SVBTP-ES.png', u'SVO.png', u'SVO-ALOL.png', u'SVO-ALOH.png', u'SVO-ALOS.png', u'SVO-CHL.png', u'SVO-CHH.png', u'SVO-CHS.png', u'SVO-CBL.png', u'SVO-CBH.png', u'SVO-CBS.png', u'SVO-CRL.png', u'SVO-CRH.png', u'SVO-CRS.png', u'SVEM.png', u'SVEM-UDL.png', u'SVEM-UDH.png', u'SVEM-UDS.png', u'CV-PT.jpg', u'CV-PT250.png', u'CV-PT100.png', u'CV-PT10.png', u'CVEXG-100.png', u'CVEXC-100.png', u'CVTR-250.png', u'CVTR-100.png', u'CVMITT-REM.png', u'CVMITT-APP.png', u'CV-AC.jpg', u'CV-ACL.png', u'CV-AC500.png', u'CV-AC300.png', u'CV-AC250.png', u'CV-AC200.png', u'CV-AC100.png', u'CV-AC50.png', u'CV-AC10.png', u'CVBW-PV1000.png', u'CVBW-PV500.png', u'CVBW-PV300.png', u'CVBW-CL1000.png', u'CVBW-CL500.png', u'CVBW-CL300.png', u'CVDBB-TAM100.png', u'CVDBB-TAM50.png', u'CVDBB-PV200.png', u'CVDBB-PV100.png', u'CVDBB-PV50.png', u'CVDBB-TOF200.png', u'CVDBB-TOF100.png', u'CVDBB-TOF50.png', u'CVBBS-100.png', u'CVBM-CL300.png', u'CV-TE.jpg', u'CV-TE250.png', u'CV-TE200.png', u'CV-TE100.png', u'CV-TE10.png', u'CVTEX-100.png', u'CVBC-100.png', u'CVSB-100.png', u'CVCTM-M200.png', u'CVCTM-M100.png', u'CVCTM-D200.png', u'CVCTM-D100.png', u'CVCTM-RM200.png', u'CVCTM-RM100.png', u'CVBTM-D200.png', u'CVBTM-D100.png', u'CV-HC.jpg', u'CV-HC375.png', u'CV-HC100.png', u'CV-HC10.png', u'CVSH-100.png', u'CVCO-100.png', u'ACS.png', u'AVUMB-L.jpg', u'AVCB-MINBLK.png', u'AVCB-LRGBLK.png', u'AVBB-L.png', u'AVBCS.png', u'AVBCS-500.png', u'AVBCS-250.png', u'AVBCS-125.png', u'AVTOW-BLKXL.png', u'AVTOW-BLKL.png', u'AVTOW-GRYS.png', u'AVBC.png', u'AVBC-300.png', u'AVBAG-PLA50.png', u'AVBAG-GIF10.png', u'EAG-MINH.png', u'EAG-ADVH.png', u'EAG-ULT.png', u'EAG-ULTH.png', u'EAG-PREH.png', u'EAG-PROH.png', u'EAP-POTDS.jpg', u'Spare-Pot_Deluxe-Gun_Black.png', u'EAP-POTPMS.png', u'EAP-POTPMG.png', u'EAP-FECPRE.png', u'EAP-FECMIN.png', u'EAP-FECPMS.png', u'EAP-DSPPRE.jpg', u'EAP-DSPMIN.png', u'EAP-DSPPMS.png', u'EAP-DIPPRE.jpg', u'EAP-DIPPRO.png', u'EAP-HOSECLCLA.png', u'EAP-HOSECLADV.png', u'EAP-HOSECLDEL.png', u'EAP-HOSECLPRE.png', u'EAP-HOSECLPRO.png', u'EAP-HOSE700PRE.png', u'EAP-FITG30ADV.png', u'EAP-FITG30DEL.png', u'EAP-FITG30PRE.png', u'EAP-FITG30PRO.png', u'EBP-LSLV.jpg', u'EBP-LSLED.jpg', u'EBP-FANC.jpg', u'EBV-PUBLK.png', u'EBV-INFT200.png', u'EBV-SPPNK.png', u'EBVP-INFAB.png', u'EBVP-INFAB200.png', u'EBVP-INFCB.jpg', u'EBVBOX-FLEDCH.png', u'EBVBOX-FLEDR.png', u'EBVBOX-FLEDHP.png', u'EBVBOX-PAC.png', u'EBVBOX-PACL.png', u'EBVBOX-PAR.png', u'EBVBOX-PAH.png', u'EBVBOX-PAHP.png', u'EBVBOX-FRC.png', u'EBVBOX-FRCL.png', u'EBVBOX-FRR.png', u'EBVBOX-FRH.png', u'EBVBOX-FRHP.png', u'EBVBOX-FA3.jpg', u'APVP-F.jpg', u'APVP-M.png', u'APVV-1F.jpg', u'APVT-F.jpg', u'APVS-1F.jpg', u'APVS-2F.jpg', u'CAN-BR.jpg', u'CAN-BT.jpg', u'CAN-CL.jpg', u'CAN-CM.jpg', u'CAN-CT.jpg', u'CAN-ES.jpg', u'CAN-FV.jpg', u'CAN-SB.jpg', u'MM.png', u'MMBRO-WAS1.png', u'PV-CS.png', u'PV-BS.png', u'PV-SS.png', u'PV-EC.png', u'PV-DE.png', u'PV-PR.png', u'MAFP-AS.png', u'MRUP-KEY.png', u'CVEXG-250.png', u'VTS-S.png']
(1) [                                    550|VTS-S.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
 all matches: (1) [                                     -1|SVV2.png <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                  105|SVV2-CAL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  106|SVV2-CAH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  107|SVV2-CAS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  109|SVV2-CCL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  110|SVV2-CCH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  111|SVV2-CCS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  113|SVV2-CFL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  114|SVV2-CFH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  115|SVV2-CFS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  117|SVV2-CML.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  118|SVV2-CMH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  119|SVV2-CMS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  121|SVV2-EBL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  122|SVV2-EBH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  123|SVV2-EBS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                    -1|SVFTB.png <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                  126|SVFTB-ML.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  127|SVFTB-MH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  128|SVFTB-MS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  130|SVFTB-DL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  131|SVFTB-DH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  132|SVFTB-DS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  134|SVFTB-XDL.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  135|SVFTB-XDH.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  136|SVFTB-XDS.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                    -1|SVBTP.png <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                  139|SVBTP-LL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  140|SVBTP-LH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  141|SVBTP-LS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  143|SVBTP-CL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  144|SVBTP-CH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  145|SVBTP-CS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  147|SVBTP-ML.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  148|SVBTP-MH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  149|SVBTP-MS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  151|SVBTP-EL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  152|SVBTP-EH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  153|SVBTP-ES.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                     -1|SVO.png <ImportWooImg>                                      ] | (0) [                                                                                                    ]
(1) [                                  156|SVO-ALOL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  157|SVO-ALOH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  158|SVO-ALOS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   160|SVO-CHL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   161|SVO-CHH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   162|SVO-CHS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   164|SVO-CBL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   165|SVO-CBH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   166|SVO-CBS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   168|SVO-CRL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   169|SVO-CRH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   170|SVO-CRS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                     -1|SVEM.png <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                  173|SVEM-UDL.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  174|SVEM-UDH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  175|SVEM-UDS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                    -1|CV-PT.jpg <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-PT250.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-PT100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-PT10.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                  308|CVEXG-100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  313|CVEXC-100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  318|CVTR-250.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  319|CVTR-100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                 322|CVMITT-REM.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 323|CVMITT-APP.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                    -1|CV-AC.jpg <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                    -1|CV-ACL.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC500.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC300.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC250.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC200.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC50.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-AC10.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                 392|CVBW-PV1000.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 393|CVBW-PV500.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 394|CVBW-PV300.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 397|CVBW-CL1000.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 398|CVBW-CL500.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 399|CVBW-CL300.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                409|CVDBB-TAM100.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 410|CVDBB-TAM50.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 413|CVDBB-PV200.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 414|CVDBB-PV100.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 415|CVDBB-PV50.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                418|CVDBB-TOF200.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                419|CVDBB-TOF100.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 420|CVDBB-TOF50.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                  425|CVBBS-100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 429|CVBM-CL300.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                    -1|CV-TE.jpg <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-TE250.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-TE200.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-TE100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-TE10.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                  486|CVTEX-100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  491|CVBC-100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  496|CVSB-100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                 500|CVCTM-M200.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 501|CVCTM-M100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 503|CVCTM-D200.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 504|CVCTM-D100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 506|CVCTM-RM200.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 507|CVCTM-RM100.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 513|CVBTM-D200.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 514|CVBTM-D100.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                    -1|CV-HC.jpg <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-HC375.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-HC100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   -1|CV-HC10.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                  544|CVSH-100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  549|CVCO-100.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                     -1|ACS.png <ImportWooImg>                                      ] | (0) [                                                                                                    ]
(1) [                                   651|AVUMB-L.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                 654|AVCB-MINBLK.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 656|AVCB-LRGBLK.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                   660|AVBB-L.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    662|AVBCS.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                  663|AVBCS-500.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  664|AVBCS-250.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  665|AVBCS-125.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 668|AVTOW-BLKXL.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 669|AVTOW-BLKL.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 671|AVTOW-GRYS.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                    673|AVBC.png <ImportWooImg>                                     ] | (0) [                                                                                                    ]
(1) [                                  674|AVBC-300.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                 678|AVBAG-PLA50.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 680|AVBAG-GIF10.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                  797|EAG-MINH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  800|EAG-ADVH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   807|EAG-ULT.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  808|EAG-ULTH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  811|EAG-PREH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  820|EAG-PROH.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  837|EAP-POTDS.jpg <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                         838|Spare-Pot_Deluxe-Gun_Black.png <ImportWooImg>                          ] | (0) [                                                                                                    ]
(1) [                                 841|EAP-POTPMS.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 842|EAP-POTPMG.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 850|EAP-FECPRE.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 851|EAP-FECMIN.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 852|EAP-FECPMS.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 857|EAP-DSPPRE.jpg <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 858|EAP-DSPMIN.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 859|EAP-DSPPMS.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 870|EAP-DIPPRE.jpg <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 871|EAP-DIPPRO.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                879|EAP-HOSECLCLA.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                880|EAP-HOSECLADV.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                881|EAP-HOSECLDEL.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                882|EAP-HOSECLPRE.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                883|EAP-HOSECLPRO.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                               887|EAP-HOSE700PRE.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                892|EAP-FITG30ADV.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                893|EAP-FITG30DEL.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                894|EAP-FITG30PRE.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                895|EAP-FITG30PRO.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                  999|EBP-LSLV.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                 1000|EBP-LSLED.jpg <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  1015|EBP-FANC.jpg <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 1108|EBV-PUBLK.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                1114|EBV-INFT200.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1121|EBV-SPPNK.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                 1123|EBVP-INFAB.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                               1124|EBVP-INFAB200.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                 1125|EBVP-INFCB.jpg <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                               1134|EBVBOX-FLEDCH.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                1135|EBVBOX-FLEDR.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                               1136|EBVBOX-FLEDHP.png <ImportWooImg>                                ] | (0) [                                                                                                    ]
(1) [                                 1142|EBVBOX-PAC.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                1143|EBVBOX-PACL.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1144|EBVBOX-PAR.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1145|EBVBOX-PAH.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                1146|EBVBOX-PAHP.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1148|EBVBOX-FRC.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                1149|EBVBOX-FRCL.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1150|EBVBOX-FRR.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1151|EBVBOX-FRH.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                1152|EBVBOX-FRHP.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                 1153|EBVBOX-FA3.jpg <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                   1223|APVP-F.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   1230|APVP-M.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  1238|APVV-1F.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                   1253|APVT-F.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  1261|APVS-1F.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  1268|APVS-2F.jpg <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-BR.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-BT.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-CL.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-CM.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-CT.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-ES.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-FV.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                    -1|CAN-SB.jpg <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                      -1|MM.png <ImportWooImg>                                      ] | (0) [                                                                                                    ]
(1) [                                 1420|MMBRO-WAS1.png <ImportWooImg>                                 ] | (0) [                                                                                                    ]
(1) [                                   1527|PV-CS.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   1528|PV-BS.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   1529|PV-SS.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   1530|PV-EC.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   1531|PV-DE.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                   1532|PV-PR.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
(1) [                                  1984|MAFP-AS.png <ImportWooImg>                                   ] | (0) [                                                                                                    ]
(1) [                                  1992|MRUP-KEY.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                  307|CVEXG-250.png <ImportWooImg>                                  ] | (0) [                                                                                                    ]
(1) [                                    426|VTS-S.png <ImportWooImg>                                    ] | (0) [                                                                                                    ]
    """

    image_matcher = ImageMatcher()
    image_matcher.clear()
    slave_imgs_attachments = OrderedDict([
        (index, image) for index, image in parsers.slave.attachments.items()
        if image.attaches.has_products_categories
    ])
    master_imgs_attachments = OrderedDict([
        (index, image) for index, image in parsers.master.attachments.items()
        if image.attaches.has_products_categories
    ])
    image_matcher.process_registers(
        slave_imgs_attachments, master_imgs_attachments
    )

    matches.image.globals.add_matches(image_matcher.pure_matches)
    matches.image.masterless.add_matches(image_matcher.masterless_matches)
    matches.image.slaveless.add_matches(image_matcher.slaveless_matches)

    if Registrar.DEBUG_IMG:
        if image_matcher.pure_matches:
            Registrar.register_message("All Image matches:\n%s" % (
                '\n'.join(map(str, image_matcher.matches))))

    matches.image.valid += image_matcher.pure_matches

    if not image_matcher.duplicate_matches:
        return matches

    extra_valid_indices_m = set()
    extra_valid_indices_s = set()

    matches.image.duplicate['file_name'] = image_matcher.duplicate_matches

    filename_duplicate_indices_m = set([
        attachment.index \
        for match in image_matcher.duplicate_matches
        for attachment in match.m_objects
    ])
    filename_duplicate_indices_s = set([
        attachment.index \
        for match in image_matcher.duplicate_matches
        for attachment in match.s_objects
    ])

    for match in image_matcher.duplicate_matches:
        if Registrar.DEBUG_IMG or Registrar.DEBUG_TRACE:
            Registrar.register_message(
                "analysing duplicate match:\n%s" % match.tabulate()
            )
        attachee_sku_sub_matches = image_matcher.find_attachee_sku_matches(match)
        for key, match in attachee_sku_sub_matches.items():
            if Registrar.DEBUG_IMG or Registrar.DEBUG_TRACE:
                Registrar.register_message(
                    "sub match %s is %s:\n%s" % (
                        key,
                        match.type,
                        match.tabulate()
                    )
                )
            if match.type in ['pure', 'masterless', 'slaveless'] \
            or match.type == 'duplicate' and match.m_len == 1:
                extra_valid_indices_m.update([
                    attachment.index for attachment in match.m_objects
                ])
                extra_valid_indices_s.update([
                    attachment.index for attachment in match.s_objects
                ])
                if match.type in ['pure', 'duplicate']:
                    matches.image.valid += [match]
                elif match.type == 'masterless':
                    try:
                        matches.image.masterless.add_matches([match])
                    except AssertionError as exc:
                        Registrar.register_warning(exc)
                elif match.type == 'slaveless':
                    try:
                        matches.image.slaveless.add_matches([match])
                    except AssertionError as exc:
                        Registrar.register_warning(exc)
            else:
                exc = UserWarning(
                    (
                        "Could not match image, most likely because multiple "
                        "images with the same name are attached to the same SKU.\n%s"
                    ) % (
                        match.tabulate()
                    )
                )
                Registrar.register_warning(exc)

    try:
        assert \
        extra_valid_indices_m.issuperset(filename_duplicate_indices_m), \
        (
            "all master indices from filename duplicates should be contained in "
            "extra attachee match indices:\nfilename:\n%s\nattachee_indices:\n%s"
        ) % (
            filename_duplicate_indices_m,
            extra_valid_indices_m
        )
        assert \
        extra_valid_indices_s.issuperset(filename_duplicate_indices_s), \
        (
            "all slave indices from filename duplicates should be contained in "
            "extra attachee match indices:\nfilename:\n%s\nattachee_indices:\n%s"
        ) % (
            filename_duplicate_indices_s,
            extra_valid_indices_s
        )
    except AssertionError as exc:
        warn = RuntimeWarning(
            "could not match all images.\n%s\n%s" % (
                "\n".join([
                    "%s:\n%s" % (key, dup_matches.tabulate()) \
                    for key, dup_matches in matches.image.duplicate.items()
                ]),
                str(exc)
            )
        )
        Registrar.register_warning(warn)
        if Registrar.DEBUG_TRACE:
            import pudb; pudb.set_trace()

    if Registrar.DEBUG_IMG or Registrar.DEBUG_TRACE:
        Registrar.register_message("all matches:\n%s" % matches.image.tabulate())

    return matches

def do_match_categories(parsers, matches, settings):

    if Registrar.DEBUG_CATS:
        Registrar.register_message(
            "matching %d master categories with %d slave categories" %
            (len(parsers.master.categories),
             len(parsers.slave.categories)))

    matches.category = MatchNamespace(
        index_fn=CategoryMatcher.category_index_fn
    )

    if not( parsers.master.categories and parsers.slave.categories ):
        return matches

    category_matcher = CategoryMatcher()
    category_matcher.clear()
    category_matcher.process_registers(
        parsers.slave.categories, parsers.master.categories
    )

    matches.category.globals.add_matches(category_matcher.pure_matches)
    matches.category.masterless.add_matches(
        category_matcher.masterless_matches)
    # matches.deny_anomalous(
    #     'category_matcher.masterless_matches', category_matcher.masterless_matches
    # )
    matches.category.slaveless.add_matches(category_matcher.slaveless_matches)
    # matches.deny_anomalous(
    #     'category_matcher.slaveless_matches', category_matcher.slaveless_matches
    # )

    if Registrar.DEBUG_CATS:
        if category_matcher.pure_matches:
            Registrar.register_message("All Category matches:\n%s" % (
                '\n'.join(map(str, category_matcher.matches))))

    # using valid because the category tree can collapse multiple master categories into single slave

    matches.category.valid += category_matcher.pure_matches

    if category_matcher.duplicate_matches:
        matches.category.duplicate['title'] = category_matcher.duplicate_matches

        for match in category_matcher.duplicate_matches:
            master_taxo_sums = [cat.namesum for cat in match.m_objects]
            if all(master_taxo_sums) \
                    and SeqUtils.check_equal(master_taxo_sums) \
                    and not len(match.s_objects) > 1:
                matches.category.valid.append(match)
            else:
                matches.category.invalid.append(match)
        if matches.category.invalid:
            exc = UserWarning(
                "categories couldn't be synchronized because of ambiguous names:\n%s"
                % '\n'.join(map(str, matches.category.invalid)))
            Registrar.register_error(exc)
            raise exc

    if category_matcher.slaveless_matches and category_matcher.masterless_matches:
        exc = UserWarning(
            "You may want to fix up the following categories before syncing:\n%s\n%s"
            %
            ('\n'.join(map(str, category_matcher.slaveless_matches)),
             '\n'.join(map(str, category_matcher.masterless_matches))))
        Registrar.register_error(exc)
        # raise exc

    return matches

# TODO: do_match_attributes ?
def do_match_attributes(parsers, matches, settings):
    if settings.do_attributes:
        raise NotImplementedError("Do Match Attributes not implemented")

def do_match_prod(parsers, matches, settings):
    """For every item in slave, find its counterpart in master."""

    Registrar.register_progress("Attempting matching")

    if not settings.do_sync:
        return matches

    product_matcher = ProductMatcher()
    product_matcher.process_registers(
        parsers.slave.products, parsers.master.products
    )
    # print product_matcher.__repr__()

    matches.globals.add_matches(product_matcher.pure_matches)
    matches.masterless.add_matches(product_matcher.masterless_matches)
    matches.deny_anomalous(
        'product_matcher.masterless_matches', product_matcher.masterless_matches
    )
    matches.slaveless.add_matches(product_matcher.slaveless_matches)
    matches.deny_anomalous(
        'product_matcher.slaveless_matches', product_matcher.slaveless_matches
    )

    try:
        matches.deny_anomalous(
            'product_matcher.duplicate_matches',
            product_matcher.duplicate_matches,
            True
        )
    except AssertionError as exc:
        exc = UserWarning(
            "products couldn't be synchronized because of ambiguous SKUs:%s"
            % '\n'.join(map(str, product_matcher.duplicate_matches)))
        Registrar.register_error(exc)
        raise exc

def do_match_var(parsers, matches, settings):
    matches.variation = MatchNamespace(
        index_fn=ProductMatcher.product_index_fn
    )

    if not settings['do_variations']:
        return

    variation_matcher = VariationMatcher()
    variation_matcher.process_registers(
        parsers.slave.variations, parsers.master.variations
    )

    if Registrar.DEBUG_VARS:
        Registrar.register_message("variation matcher:\n%s" %
                                   variation_matcher.__repr__())

    matches.variation.globals.add_matches(variation_matcher.pure_matches)
    matches.variation.masterless.add_matches(
        variation_matcher.masterless_matches)
    matches.variation.deny_anomalous(
        'variation_matcher.masterless_matches',
        variation_matcher.masterless_matches
    )
    matches.variation.slaveless.add_matches(
        variation_matcher.slaveless_matches)
    matches.variation.deny_anomalous(
        'variation_matcher.slaveless_matches',
        variation_matcher.slaveless_matches
    )
    if variation_matcher.duplicate_matches:
        matches.variation.duplicate['index'] = variation_matcher.duplicate_matches


def do_merge_images(matches, parsers, updates, settings):
    updates.image = UpdateNamespace()

    if not hasattr(matches, 'image'):
        return updates

    sync_handles = settings.sync_handles_img

    for match in matches.image.valid:
        m_object = match.m_object
        for s_object in match.s_objects:

            sync_update = settings.syncupdate_class_img(m_object, s_object)

            sync_update.update(sync_handles)

            if not sync_update.important_static:
                updates.image.problematic.append(sync_update)
                continue

            if sync_update.m_updated:
                updates.image.master.append(sync_update)

            if sync_update.s_updated:
                updates.image.slave.append(sync_update)

    if settings['auto_create_new']:
        for count, match in enumerate(matches.image.slaveless):
            m_object = match.m_object
            Registrar.register_message(
                "will create image %d: %s" % (
                    count, m_object.identifier
                )
            )
            if not (m_object.attaches.products or m_object.attaches.categories):
                continue

            empty_s_object = parsers.slave.get_empty_attachment_instance()
            sync_update = settings.syncupdate_class_img(
                m_object, empty_s_object
            )
            sync_update.update(sync_handles)
            updates.image.new_slaves.append(sync_update)

    return updates

def do_merge_categories(matches, parsers, updates, settings):
    updates.category = UpdateNamespace()

    if not hasattr(matches, 'category'):
        return updates

    sync_handles = settings.sync_handles_cat

    for match in matches.category.valid:
        s_object = match.s_object
        for m_object in match.m_objects:
            sync_update = settings.syncupdate_class_cat(m_object, s_object)

            sync_update.update(sync_handles)

            if settings.do_images:
                sync_update.simplify_sync_warning_value_singular('image', ['id', 'title', 'source_url'])

            if not sync_update.important_static:
                updates.category.problematic(sync_update)
                continue

            if sync_update.m_updated:
                updates.category.master.append(sync_update)

            if sync_update.s_updated:
                updates.category.slave.append(sync_update)

    if settings['auto_create_new']:
        for count, match in enumerate(matches.category.slaveless):
            m_object = match.m_object
            Registrar.register_message(
                "will create category %d: %s" % (
                    count, m_object.identifier
                )
            )
            empty_s_object = parsers.slave.get_empty_category_instance()
            sync_update = settings.syncupdate_class_cat(m_object, empty_s_object)
            sync_update.update(sync_handles)
            updates.category.new_slaves.append(sync_update)

    return updates

# TODO: do_merge_attributes ?

def do_merge_attributes(matches, parsers, updates, settings):
    if settings.do_attributes:
        raise NotImplementedError("Do Merge Attributes not implemented")

def do_merge_prod(matches, parsers, updates, settings):
    """For a given list of matches, return a description of updates required to merge them."""

    if settings.do_variations:
        updates.variation = UpdateNamespace()

    if not settings['do_sync']:
        return

    sync_handles = settings.sync_handles_prod

    if Registrar.DEBUG_UPDATE:
        Registrar.register_message("sync_handles: %s" % repr(sync_handles))

    for _, match in enumerate(matches.globals):
        if Registrar.DEBUG_CATS or Registrar.DEBUG_VARS:
            Registrar.register_message("processing match: %s" %
                                       match.tabulate())
        m_object = match.m_object
        s_object = match.s_object

        # , "gcs %s is not variation but object is" % repr(gcs)
        assert not m_object.is_variation
        # , "gcs %s is not variation but object is" % repr(gcs)
        assert not s_object.is_variation

        sync_update = settings.syncupdate_class_prod(m_object, s_object)

        sync_update.update(sync_handles)

        if settings.do_categories:
            sync_update.simplify_sync_warning_value_listed('product_categories', ['term_id'])

        if settings.do_images:
            sync_update.simplify_sync_warning_value_listed('attachment_objects', ['id', 'title', 'source_url', 'position'])

        # TODO: settings.do_attributes
        # if settings.do_attributes:
        #     sync_update.simplify_sync_warning_value_listed('attributes', ['term_id'])

        # Assumes that GDrive is read only, doesn't care about master
        # updates
        if not sync_update.s_updated:
            continue

        if Registrar.DEBUG_UPDATE:
            Registrar.register_message("sync updates:\n%s" %
                                       sync_update.tabulate())

        if sync_update.s_updated and sync_update.s_deltas:
            updates.delta_slave.append(sync_update)

        if not sync_update.important_static:
            updates.problematic.append(sync_update)
            continue

        if sync_update.s_updated:
            updates.slave.append(sync_update)

    if settings['auto_create_new']:
        for new_prod_count, new_prod_match in enumerate(matches.slaveless):

            m_object = new_prod_match.m_object
            Registrar.register_message(
                "will create product %d: %s" % (
                    new_prod_count, m_object.identifier
                )
            )
            sync_update = settings.syncupdate_class_prod(m_object)
            sync_update.update(sync_handles)
            updates.category.new_slaves.append(
                sync_update
            )

def do_merge_var(matches, parsers, updates, settings):
    if not settings['do_variations']:
        return

    sync_handles = settings.sync_handles_var

    if matches.variation.duplicate:
        exc = UserWarning(
            "variations couldn't be synchronized because of ambiguous SKUs:%s"
            % '\n'.join(map(str, matches.variation.duplicate)))
        Registrar.register_error(exc)
        raise exc

    for var_match_count, var_match in enumerate(matches.variation.globals):
        # print "processing var_match: %s" % var_match.tabulate()
        m_object = var_match.m_object
        s_object = var_match.s_object

        sync_update = settings.syncupdate_class_var(m_object, s_object)

        sync_update.update(sync_handles)

        if settings.do_images:
            # TODO: this might not be the right handle for variation image
            sync_update.simplify_sync_warning_value_listed('attachment_objects', ['id'])

        # Assumes that GDrive is read only, doesn't care about master
        # updates
        if not sync_update.s_updated:
            continue

        if Registrar.DEBUG_VARS:
            Registrar.register_message("var update %d:\n%s" % (
                var_match_count, sync_update.tabulate()))

        if not sync_update.important_static:
            updates.variation.problematic.append(sync_update)
            continue

        if sync_update.s_updated:
            updates.variation.slave.append(sync_update)

    for var_match_count, var_match in enumerate(
            matches.variation.slaveless):
        assert var_match.has_no_slave
        m_object = var_match.m_object

        # sync_update = SyncUpdateVarWoo(m_object, None)

        # sync_update.update()

        if Registrar.DEBUG_VARS:
            Registrar.register_message("var create %d:\n%s" % (
                var_match_count, m_object.identifier))

        # TODO: figure out which attribute terms to add

    for var_match_count, var_match in enumerate(
            matches.variation.masterless):
        assert var_match.has_no_master
        s_object = var_match.s_object

        # sync_update = SyncUpdateVarWoo(None, s_object)

        # sync_update.update()

        if Registrar.DEBUG_VARS:
            Registrar.register_message("var delete: %d:\n%s" % (
                var_match_count, s_object.identifier))

        # TODO: figure out which attribute terms to delete

    if settings['auto_create_new']:
        # TODO: auto create new variations
        raise NotImplementedError()

def do_report_images(reporters, matches, updates, parsers, settings):
    if not settings.get('do_report'):
        return reporters

    Registrar.register_progress("Write Images Report")

    do_img_sync_group(reporters.img, matches, updates, parsers, settings)

    if settings.get('report_matching'):
        do_matches_group(reporters.img, matches.image, updates, parsers, settings)

    if reporters.img:
        reporters.img.write_document_to_file('img', settings.rep_img_path)

    return reporters

def do_report_categories(reporters, matches, updates, parsers, settings):
    if not settings.get('do_report'):
        return reporters

    Registrar.register_progress("Write Categories Report")

    do_cat_sync_gruop(reporters.cat, matches, updates, parsers, settings)

    if reporters.cat:
        reporters.cat.write_document_to_file('cat', settings.rep_cat_path)

    return reporters

# TODO: do_report_attributes ?

def do_report_attributes(reporters, matches, updates, parsers, settings):
    if settings.do_attributes:
        raise NotImplementedError("Do Report Attributes not implemented")

def do_report(reporters, matches, updates, parsers, settings):
    """ Write report of changes to be made. """

    if not settings.get('do_report'):
        return reporters

    Registrar.register_progress("Write Report")

    do_main_summary_group(
        reporters.main, matches, updates, parsers, settings
    )
    do_delta_group(
        reporters.main, matches, updates, parsers, settings
    )
    do_sync_group(
        reporters.main, matches, updates, parsers, settings
    )
    do_var_sync_group(
        reporters.main, matches, updates, parsers, settings
    )

    if reporters.main:
        reporters.main.write_document_to_file('main', settings.rep_main_path)

    if settings.get('report_matching'):
        Registrar.register_progress("Write Matching Report")

        do_matches_summary_group(
            reporters.match, matches, updates, parsers, settings
        )
        do_matches_group(
            reporters.match, matches, updates, parsers, settings
        )
        if settings.do_variations:
            do_variation_matches_group(
                reporters.match, matches, updates, parsers, settings
            )
        if settings.do_categories:
            do_category_matches_group(
                reporters.match, matches, updates, parsers, settings
            )

        if reporters.match:
            reporters.match.write_document_to_file(
                'match', settings.rep_match_path)

    return reporters

def do_report_post(reporters, results, settings):
    """ Reports results from performing updates."""
    # raise NotImplementedError()
    if settings.get('do_report'):
        Registrar.register_progress("Write Post Report")

        do_post_summary_group(reporters.post, results, settings)
        do_failures_group(reporters.post, results, settings)
        do_successes_group(reporters.post, results, settings)
        if reporters.post:
            reporters.post.write_document_to_file(
                'post', settings.rep_post_path)

def handle_failed_update(update, results, exc, settings, source=None):
    """Handle a failed update."""
    fail = (update, exc)
    if source == settings.master_name:
        pkey = update.master_id
        results.fails_master.append(fail)
    elif source == settings.slave_name:
        pkey = update.slave_id
        results.fails_slave.append(fail)
    else:
        pkey = ''
    Registrar.register_error(
        "ERROR UPDATING %s (%s): %s\n%s\n%s" % (
            source or '',
            pkey,
            repr(exc),
            update.tabulate(),
            traceback.format_exc()
        )
    )

    if Registrar.DEBUG_TRACE:
        import pudb; pudb.set_trace()

def usr_prompt_continue(settings):
    try:
        raw_in = input("\n".join([
            "Please read reports and then make your selection",
            " - press Enter to continue and perform updates",
            " - press s to skip updates",
            " - press c to cancel",
            "..."
        ]))
    except SyntaxError:
        raw_in = ""
    if raw_in == 's':
        return 's'
    if raw_in == 'c':
        raise SystemExit

# TODO: collapse upload_new functions
def upload_new_images_slave(parsers, results, settings, client, new_updates):

    if not (new_updates and settings['update_slave']):
        return

    if Registrar.DEBUG_PROGRESS:
        update_progress_counter = ProgressCounter(
            len(new_updates), items_plural='new %s' % client.endpoint_plural
        )

    # sync_handles = settings.sync_handles_img

    update_count = 0

    while new_updates:

        sync_update = new_updates.pop(0)

        core_data = sync_update.get_slave_updates()

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "new %s (core format) %s" % (
                    client.endpoint_singular,
                    core_data
                )
           )

        update_count += 1
        if Registrar.DEBUG_PROGRESS:
            update_progress_counter.maybe_print_update(update_count)

        try:
            response = client.create_item_core(core_data)
            response_api_data = response.json()
        except BaseException as exc:
            handle_failed_update(
                sync_update, results, exc, settings, settings.slave_name
            )
            continue
        if client.page_nesting:
            response_api_data = response_api_data[client.endpoint_singular]

        response_gen_object = parsers.slave.analyse_api_image_raw(response_api_data)

        # TODO: fix constantly re-uploading images

        if Registrar.DEBUG_IMG:
            Registrar.register_message(
                "image being updated with parser data: %s"
                % pformat(response_gen_object))

        sync_update.set_new_s_object_gen(response_gen_object)
        sync_update.old_m_object_gen.update(response_gen_object)

        results.successes.append(sync_update)

# TODO: collapse upload_changes functions
def upload_image_changes_slave(parsers, results, settings, client, change_updates):

    if Registrar.DEBUG_PROGRESS:
        update_progress_counter = ProgressCounter(
            len(change_updates), items_plural='%s updates' % client.endpoint_singular
        )

    if not settings['update_slave']:
        return

    for count, sync_update in enumerate(change_updates):
        if Registrar.DEBUG_PROGRESS:
            update_progress_counter.maybe_print_update(count)

        if not sync_update.s_updated:
            continue

        try:
            pkey = sync_update.slave_id
            changes = sync_update.get_slave_updates()
            response_raw = client.upload_changes_core(pkey, changes)
            response_api_data = response_raw.json()
            if client.page_nesting:
                response_api_data = response_api_data[client.endpoint_singular]
        except Exception as exc:
            handle_failed_update(
                sync_update, results, exc, settings, settings.slave_name
            )
            continue

        if response_api_data['id'] != pkey:
            # if pkey has changed since update, i.e. a new item was uploaded
            response_gen_object = parsers.slave.analyse_api_image_raw(response_api_data)
        else:
            response_core_data = settings.coldata_class_img.translate_data_from(
                response_api_data, settings.coldata_img_target
            )
            response_gen_data = settings.coldata_class_img.translate_data_to(
                response_core_data, settings.coldata_gen_target_write
            )
            sync_update.old_s_object_gen.update(response_gen_data)
            response_gen_object = sync_update.old_s_object_gen

        sync_update.set_new_s_object_gen(response_gen_object)
        sync_update.old_m_object_gen.update(response_gen_object)

        results.successes.append(sync_update)

def do_updates_images_master(updates, parsers, results, settings):

    for update in updates.image.master:
        old_master_id = update.master_id
        if Registrar.DEBUG_UPDATE:
            Registrar.register_message(
                "performing update < %5s | %5s > = \n%100s, %100s " %
                (update.master_id, update.slave_id,
                 str(update.old_m_object), str(update.old_s_object)))
        if not old_master_id in parsers.master.attachments:
            exc = UserWarning(
                "couldn't fine pkey %s in parsers.master.attachments" %
                update.master_id)
            Registrar.register_error(exc)
            continue
        parsers.master.attachments[old_master_id].update(
            update.get_master_updates_native()
        )

def do_updates_images_slave(updates, parsers, results, settings):
    """Perform a list of updates on attachments."""

    results.image = ResultsNamespace()
    results.image.new = ResultsNamespace()

    sync_client_class = settings.slave_img_sync_client_class
    sync_client_args = settings.slave_img_sync_client_args

    # updates in which an item is modified
    change_updates = updates.image.slave
    if settings.do_problematic:
        change_updates += updates.image.problematic
    # updates in which a new item is created
    new_updates = []
    if settings['auto_create_new']:
        new_updates += updates.image.new_slaves
    else:
        for update in new_updates:
            new_item_api = update.get_slave_updates_native()
            exc = UserWarning("{0} needs to be created: {1}".format(
                sync_client_class.endpoint_singular, new_item_api
            ))
            Registrar.register_warning(exc)
    Registrar.register_progress("Changing {1} {0} and creating {2} {0}".format(
        sync_client_class.endpoint_plural, len(change_updates), len(new_updates)
    ))

    if not (new_updates or change_updates):
        return

    if settings['ask_before_update']:
        if usr_prompt_continue(settings) == 's':
            return

    with sync_client_class(**sync_client_args) as client:
        if Registrar.DEBUG_IMG:
            Registrar.register_message("created img client")

        if new_updates:
            # create attachments that do not yet exist on slave
            upload_new_images_slave(
                parsers, results.image.new, settings, client, new_updates
            )

        if change_updates:
            upload_image_changes_slave(
                parsers, results.image, settings, client, change_updates
            )

def upload_new_categories_slave(parsers, results, settings, client, new_updates):
    """
    Create new categories in client in an order which creates parents first.
    """
    if Registrar.DEBUG_PROGRESS:
        update_progress_counter = ProgressCounter(
            len(new_updates), items_plural='new %s' % client.endpoint_plural
        )

    if not (new_updates and settings['update_slave']):
        return

    sync_handles = settings.sync_handles_cat

    update_count = 0

    while new_updates:

        sync_update = new_updates.pop(0)
        new_object_gen = sync_update.old_m_object_gen

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "new %s %s" % (
                    client.endpoint_singular,
                    new_object_gen
                )
           )

        # make sure parent updates are done before children

        if new_object_gen.parent:
            remaining_m_objects = set([
                sync_update.old_m_object_gen for update_ in new_updates
            ])
            parent = new_object_gen.parent
            if not parent.is_root and parent in remaining_m_objects:
                new_updates.append(sync_update)
                continue


        # have to refresh sync_update to get parent wpid since parente wpid is populated in do_updates_categories_master
        sync_update.set_old_m_object_gen(sync_update.old_m_object)
        sync_update.update(sync_handles)

        core_data = sync_update.get_slave_updates()

        if Registrar.DEBUG_UPDATE:
            Registrar.register_message("uploading new category (api format): %s" % pformat(core_data))

        update_count += 1
        if Registrar.DEBUG_PROGRESS:
            update_progress_counter.maybe_print_update(update_count)

        try:
            response = client.create_item_core(core_data)
            response_api_data = response.json()
        except BaseException as exc:
            handle_failed_update(
                sync_update, results, exc, settings, settings.slave_name
            )
            continue
        if client.page_nesting:
            response_api_data = response_api_data[client.endpoint_singular]

        response_gen_object = parsers.slave.process_api_category_raw(response_api_data)

        sync_update.set_new_s_object_gen(response_gen_object)

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "%s being updated with parser data: %s" % (
                    client.endpoint_singular,
                    pformat(response_gen_object)
                )
            )

        sync_update.old_m_object_gen.update(response_gen_object)

        results.successes.append(sync_update)

def upload_category_changes_slave(parsers, results, settings, client, change_updates):
    """
    Upload a list of category changes
    """

    if Registrar.DEBUG_PROGRESS:
        update_progress_counter = ProgressCounter(
            len(change_updates), items_plural='%s updates' % client.endpoint_singular
        )

    if not settings['update_slave']:
        return

    for count, sync_update in enumerate(change_updates):
        if Registrar.DEBUG_PROGRESS:
            update_progress_counter.maybe_print_update(count)

        if not sync_update.s_updated:
            continue

        try:
            pkey = sync_update.slave_id
            changes = sync_update.get_slave_updates_native()
            # TODO: does this need replacing?
            # if 'image' in changes:
            #     # quick hack to stop syncing bad images
            #     if 'src' in changes['image']:
            #         del changes['image']
            response_raw = client.upload_changes(pkey, changes)
            response_api_data = response_raw.json()
        except Exception as exc:
            handle_failed_update(
                sync_update, results, exc, settings, settings.slave_name
            )
            continue

        response_core_data = settings.coldata_class_cat.translate_data_from(
            response_api_data, settings.coldata_cat_target
        )
        response_gen_data = settings.coldata_class_cat.translate_data_to(
            response_core_data, settings.coldata_gen_target_write
        )

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "%s being updated with parser data: %s" % (
                    client.endpoint_singular,
                    pformat(response_gen_data)
                )
            )

        sync_update.old_s_object_gen.update(response_gen_data)
        sync_update.set_new_s_object_gen(sync_update.old_s_object_gen)
        sync_update.old_m_object_gen.update(response_gen_data)

        results.successes.append(sync_update)

def do_updates_categories_master(updates, parsers, results, settings):
    for update in updates.category.master:
        if Registrar.DEBUG_UPDATE:
            Registrar.register_message(
                "performing update < %5s | %5s > = \n%100s, %100s " %
                (
                    update.master_id, update.slave_id,
                    str(update.old_m_object), str(update.old_s_object))
                )
        if not update.master_id in parsers.master.categories:
            exc = UserWarning(
                "couldn't fine pkey %s in parsers.master.categories" %
                update.master_id)
            Registrar.register_error(exc)
            continue
        parsers.master.categories[update.master_id].update(
            update.get_master_updates_native()
        )

def do_updates_categories_slave(updates, parsers, results, settings):
    """Perform a list of updates on categories."""
    if not hasattr(updates, 'category'):
        return

    results.category = ResultsNamespace()
    results.category.new = ResultsNamespace()

    sync_client_class = settings.slave_cat_sync_client_class
    sync_client_args = settings.slave_cat_sync_client_args

    # updates in which an item is modified
    change_updates = updates.category.slave
    if settings.do_problematic:
        change_updates += updates.category.problematic
    # updates in which a new item is created
    new_updates = []
    if settings['auto_create_new']:
        new_updates += updates.category.new_slaves
    else:
        for update in new_updates:
            new_item_api = update.get_slave_updates_native()
            exc = UserWarning("{0} needs to be created: {1}".format(
                sync_client_class.endpoint_plural, new_item_api
            ))
            Registrar.register_warning(exc)
    Registrar.register_progress("Changing {1} {0} and creating {2} {0}".format(
        sync_client_class.endpoint_plural, len(change_updates), len(new_updates)
    ))

    if not (new_updates or change_updates):
        return

    if settings['ask_before_update']:
        if usr_prompt_continue(settings) == 's':
            return

    with sync_client_class(**sync_client_args) as client:
        if Registrar.DEBUG_CATS:
            Registrar.register_message("created cat client")

        if new_updates:
            # create categories that do not yet exist on slave
            upload_new_categories_slave(
                parsers, results.category.new, settings, client, new_updates
            )

        if change_updates:
            upload_category_changes_slave(
                parsers, results.category, settings, client, change_updates
            )

# TODO: do_updates_attributes_master ?
def do_updates_attributes_master(updates, parsers, results, settings):
    if settings.do_attributes:
        raise NotImplementedError("Do Updates Attributes Master not implemented")

# TODO: do_updates_attributes_slave ?
def do_updates_attributes_slave(updates, parsers, results, settings):
    if settings.do_attributes:
        raise NotImplementedError("Do Updates Attributes Slave not implemented")

def upload_new_products(parsers, results, settings, client, new_updates):
    """
    Create new products in client in an order which creates parents first.
    """
    raise NotImplementedError()

    if Registrar.DEBUG_PROGRESS:
        update_progress_counter = ProgressCounter(
            len(new_updates), items_plural='new %s' % client.endpoint_plural
        )

    if not (new_updates and settings['update_slave']):
        return

    sync_handles = settings.sync_handles_prod

    update_count = 0

    while new_updates:

        sync_update = new_updates.pop(0)
        new_object_gen = sync_update.old_m_object_gen

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "new %s %s" % (
                    client.endpoint_singular,
                    new_object_gen
                )
           )

        # have to refresh sync_update to get parent wpid since parente wpid is populated in do_updates_categories_master
        sync_update.set_old_m_object_gen(sync_update.old_m_object)
        sync_update.update(sync_handles)

        core_data = sync_update.get_slave_updates()

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "new %s (core format) %s" % (
                    client.endpoint_singular,
                    core_data
                )
           )

        update_count += 1
        if Registrar.DEBUG_PROGRESS:
            update_progress_counter.maybe_print_update(update_count)

        try:
            response = client.create_item_core(core_data)
            response_api_data = response.json()
        except BaseException as exc:
            handle_failed_update(
                sync_update, results, exc, settings, settings.slave_name
            )
            continue
        if client.page_nesting:
            response_api_data = response_api_data[client.endpoint_singular]

        response_gen_object = parsers.slave.analyse_api_obj(response_api_data)

        sync_update.set_new_s_object_gen(response_gen_object)

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "%s being updated with parser data: %s" % (
                    client.endpoint_singular,
                    pformat(response_gen_object)
                )
            )

        sync_update.old_m_object_gen.update(response_gen_object)

        results.successes.append(sync_update)

def upload_product_changes(parsers, results, settings, client, change_updates):

    if Registrar.DEBUG_PROGRESS:
        update_progress_counter = ProgressCounter(
            len(change_updates), items_plural='%s updates' % client.endpoint_singular
        )

    if not settings['update_slave']:
        return

    for count, sync_update in enumerate(change_updates):
        if Registrar.DEBUG_PROGRESS:
            update_progress_counter.maybe_print_update(count)

        if not sync_update.s_updated:
            continue

        try:
            pkey = sync_update.slave_id
            changes = sync_update.get_slave_updates_native()
            response_raw = client.upload_changes(pkey, changes)
            response_api_data = response_raw.json()
        except Exception as exc:
            handle_failed_update(
                sync_update, results, exc, settings, settings.slave_name
            )
            continue

        response_core_data = settings.coldata_class.translate_data_from(
            response_api_data, settings.coldata_cat_target
        )
        response_gen_data = settings.coldata_class.translate_data_to(
            response_core_data, settings.coldata_gen_target_write
        )

        if Registrar.DEBUG_API:
            Registrar.register_message(
                "%s being updated with parser data: %s" % (
                    client.endpoint_singular,
                    pformat(response_gen_data)
                )
            )

        sync_update.old_s_object_gen.update(response_gen_data)
        sync_update.set_new_s_object_gen(sync_update.old_s_object_gen)
        sync_update.old_m_object_gen.update(response_gen_data)

        results.successes.append(sync_update)

def do_updates_prod(updates, parsers, settings, results):
    """
    Update products in slave.
    """
    # updates in which an item is modified

    results.new = ResultsNamespace()
    slave_client_class = settings.slave_upload_client_class
    slave_client_args = settings.slave_upload_client_args

    change_updates = updates.slave
    if settings.do_problematic:
        change_updates += updates.problematic
    # updates in which a new item is created
    new_updates = []
    if settings['auto_create_new']:
        new_updates += updates.new_slaves
    else:
        for update in new_updates:
            new_item_api = update.get_slave_updates_native()
            exc = UserWarning("{0} needs to be created: {1}".format(
                slave_client_class.endpoint_singular, new_item_api
            ))
            Registrar.register_warning(exc)
    Registrar.register_progress("Changing {1} {0} and creating {2} {0}".format(
        slave_client_class.endpoint_plural, len(change_updates), len(new_updates)
    ))

    if not (new_updates or change_updates):
        return

    if settings['ask_before_update']:
        if usr_prompt_continue(settings) == 's':
            return


    with slave_client_class(**slave_client_args) as client:
        if new_updates:
            upload_new_products(
                parsers, results, settings, client, new_updates
            )
        if change_updates:
            upload_product_changes(
                parsers, results, settings, client, change_updates
            )

def do_updates_var(updates, parsers, settings, results):
    raise NotImplementedError()

    change_updates = updates.variation.slave
    if settings.do_problematic:
        change_updates += updates.variation.problematic

    if not change_updates:
        return


def main(override_args=None, settings=None):
    """Main function for generator."""
    if not settings:
        settings = SettingsNamespaceProd()
    settings.init_settings(override_args)

    settings.init_dirs()

    ########################################
    # Create Product Parser object
    ########################################

    parsers = ParserNamespace()
    populate_master_parsers(parsers, settings)

    check_warnings(settings)

    if settings.schema_is_woo and settings.do_images:
        process_images(settings, parsers)

    if parsers.master.objects and settings.do_export_master:
        export_master_parser(settings, parsers)

    if settings.master_and_quit:
        sys.exit(ExitStatus.success)

    populate_slave_parsers(parsers, settings)

    if parsers.slave.objects:
        cache_api_data(settings, parsers)

    matches = MatchNamespace(
        index_fn=ProductMatcher.product_index_fn
    )
    updates = UpdateNamespace()
    reporters = ReporterNamespace()
    results = ResultsNamespace()

    if settings.do_images:
        do_match_images(parsers, matches, settings)
        do_merge_images(matches, parsers, updates, settings)
        do_report_images(
            reporters, matches, updates, parsers, settings
        )
        Registrar.register_message(
            "pre-sync summary: \n%s" % reporters.img.get_summary_text()
        )
        check_warnings(settings)
        if not settings.report_and_quit:
            do_updates_images_master(updates, parsers, results, settings)
            try:
                do_updates_images_slave(updates, parsers, results, settings)
            except (SystemExit, KeyboardInterrupt) as exc:
                Registrar.register_error(exc)
                return reporters, results

    if settings.do_categories:

        do_match_categories(parsers, matches, settings)
        do_merge_categories(matches, parsers, updates, settings)
        do_report_categories(
            reporters, matches, updates, parsers, settings
        )
        Registrar.register_message(
            "pre-sync summary: \n%s" % reporters.cat.get_summary_text()
        )
        check_warnings(settings)
        if not settings.report_and_quit:
            do_updates_categories_master(updates, parsers, results, settings)
            if settings.report_matched_categories:
                export_categories(settings, parsers.master, settings.rep_matched_cat_path, 'wc-csv')
                reporters.cat.add_csv_file('matched_cat', settings.rep_matched_cat_path)
            try:
                do_updates_categories_slave(updates, parsers, results, settings)
            except (SystemExit, KeyboardInterrupt) as exc:
                Registrar.register_error(exc)
                return reporters, results

    if settings.do_attributes:
        Registrar.register_error(NotImplementedError("Functions past this point have not been completed"))
        return reporters, results

        do_match_attributes(parsers, matches, settings)
        do_merge_attributes(matches, parsers, updates, settings)
        do_report_attributes(
            reporters, matches, updates, parsers, settings
        )
        Registrar.register_message(
            "pre-sync summary: \n%s" % reporters.attr.get_summary_text()
        )
        check_warnings(settings)
        if not settings.report_and_quit:
            do_updates_attributes_master(updates, parsers, results, settings)
            try:
                do_updates_attributes_slave(updates, parsers, results, settings)
            except (SystemExit, KeyboardInterrupt) as exc:
                Registrar.register_error(exc)
                return reporters, results

    do_match_prod(parsers, matches, settings)
    do_merge_prod(matches, parsers, updates, settings)
    do_merge_var(matches, parsers, updates, settings)
    # check_warnings(settings)
    do_report(reporters, matches, updates, parsers, settings)

    if settings.report_and_quit:
        sys.exit(ExitStatus.success)

    check_warnings(settings)

    Registrar.register_message(
        "pre-sync summary: \n%s" % reporters.main.get_summary_text()
    )

    try:
        do_updates_prod(updates, parsers, settings, results)
    except (SystemExit, KeyboardInterrupt) as exc:
        Registrar.register_error(exc)
        return reporters, results
    if settings['do_variations']:

        Registrar.register_error(NotImplementedError("Functions past this point have not been completed"))
        return reporters, results

        try:
            do_updates_var(updates, parsers, settings, results)
        except (SystemExit, KeyboardInterrupt) as exc:
            Registrar.register_error(exc)
            return reporters, results
    do_report_post(reporters, results, settings)

    Registrar.register_message(
        "post-sync summary: \n%s" % reporters.post.get_summary_text()
    )

    #########################################
    # Display reports
    #########################################

    Registrar.register_progress("Displaying reports")

    if settings.do_report:
        if settings['rep_web_path']:
            shutil.copyfile(settings.rep_main_path, settings['rep_web_path'])
            if settings['web_browser']:
                os.environ['BROWSER'] = settings['web_browser']
                # print "set browser environ to %s" % repr(web_browser)
            # print "moved file from %s to %s" % (settings.rep_main_path,
            # repWeb_path)

            webbrowser.open(settings['rep_web_link'])
    else:
        print "open this link to view report %s" % settings['rep_web_link']


def catch_main(override_args=None):
    """Run the main function within a try statement and attempt to analyse failure."""
    file_path = __file__
    cur_dir = os.getcwd() + '/'
    if file_path.startswith(cur_dir):
        file_path = file_path[len(cur_dir):]
    override_args_repr = ''
    if override_args is not None:
        override_args_repr = ' '.join(override_args)

    full_run_str = "%s %s %s" % (
        str(sys.executable), str(file_path), override_args_repr)

    settings = SettingsNamespaceProd()

    status = 0
    try:
        main(settings=settings, override_args=override_args)
    except SystemExit:
        status = ExitStatus.failure
    except KeyboardInterrupt:
        pass
    except BaseException as exc:
        status = 1
        if isinstance(exc, UserWarning):
            status = 65
        elif isinstance(exc, IOError):
            status = 74
            print( "cwd: %s" % os.getcwd() )
        elif exc.__class__ in ["ReadTimeout", "ConnectionError", "ConnectTimeout", "ServerNotFoundError"]:
            status = 69  # service unavailable

        if status:
            Registrar.register_error(traceback.format_exc())
            Registrar.raise_exception(exc)

    with io.open(settings.log_path, 'w+', encoding='utf8') as log_file:
        for source, messages in Registrar.get_message_items(1).items():
            print source
            log_file.writelines([SanitationUtils.coerce_unicode(source)])
            log_file.writelines([
                SanitationUtils.coerce_unicode(message) for message in messages
            ])
            for message in messages:
                pprint(message, indent=4, width=80, depth=2)

    #########################################
    # zip reports
    #########################################

    files_to_zip = [
        settings.rep_fail_master_csv_path, settings.rep_fail_slave_csv_path, settings.rep_main_path
    ]

    with zipfile.ZipFile(settings.zip_path, 'w') as zip_file:
        for file_to_zip in files_to_zip:
            try:
                os.stat(file_to_zip)
                zip_file.write(file_to_zip)
            except BaseException:
                pass
        Registrar.register_message('wrote file %s' % zip_file.filename)

    # print "\nexiting with status %s \n" % status
    if status:
        print "re-run with: \n%s" % full_run_str
    else:
        Registrar.register_message("re-run with:\n%s" % full_run_str)

    sys.exit(status)


if __name__ == '__main__':
    catch_main()
